@model GlobeWork.ViewModel.CreatePostViewModel
@{
    ViewBag.Title = "Cập nhật tin tuyển dụng";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}
<style>
    .w100 {
        width: 100% !important;
    }

    .load-order-view {
        padding: 0 15px;
    }

    .vscomp-ele {
        max-width: none;
    }

    .item {
        margin-top: 24px;
    }

    .title {
        font-size: 1.25rem;
    }

    .box {
        margin-top: 16px;
    }

    .vscomp-toggle-all-button {
        display: none !important;
    }
</style>
<h2 class="mb-5">Cập nhât</h2>
@using (Html.BeginForm("UpdateJobPostVcms", "JobPostVcms", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.HiddenFor(model => model.JobPost.Id)
    @*@Html.HiddenFor(model => model.JobPost.CompanyId)
        @Html.HiddenFor(model => model.JobPost.CityId)
        @Html.HiddenFor(model => model.JobPost.RankId)
        @Html.HiddenFor(model => model.JobPost.JobTypeId)*@
    <div class="box_content">
        @Html.ValidationSummary(true)
        <div class="item">
            @Html.LabelFor(model => model.JobPost.Name)
            @Html.EditorFor(model => model.JobPost.Name)
            @Html.ValidationMessageFor(model => model.JobPost.Name)
        </div>

        <div class="row">
            <div class="col-lg-6">
                <div class="item w-100">
                    <label>Ngành nghề*</label>
                    <select class="career" name="CareerId" placeholder="Chọn ngành nghề">
                        @foreach (var item in Model.Careers)
                        {
                            <option value="@item.Id" @if (Model.JobPost.CareerId == item.Id) { @Html.Raw("selected") }>@item.Name</option>
                        }
                    </select>
                </div>

            </div>
            <div class="col-lg-6">
                <div class="item w-100">
                    <label>Hình thức công việc*</label>
                    <select class="type" required name="JobTypeId" placeholder="Chọn hình thức">
                        <option value="" selected disabled>Chọn hình thức</option>
                        @foreach (var item in Model.JobTypeSelectList)
                        {
                            <option value="@item.Value" @if (Model.JobPost.JobTypeId == Convert.ToInt32(item.Value)) { @Html.Raw("selected") }>@item.Text</option>
                        }
                    </select>
                </div>
            </div>
            <div class="col-lg-6">
                <div class="item w-100">
                    <label>Cấp bậc*</label>
                    <select class="rank" required name="RankId" placeholder="Chọn cấp bậc">
                        <option value="" selected disabled>Chọn cấp bậc</option>
                        @foreach (var item in Model.RankSelectList)
                        {
                            <option name="rank" value="@item.Value" @if (Model.JobPost.RankId == Convert.ToInt32(item.Value)) { @Html.Raw("selected") }>@item.Text</option>
                        }
                    </select>
                </div>
            </div>
            <div class="col-lg-6">
                <div class="item">
                    <label>Mức lương</label>
                    @Html.EnumDropDownListFor(model => model.JobPost.Wages, new { @class = "v-select" })
                </div>
            </div>
        </div>
        <div class="box">
            <h3 class="title">
                Cách thức nộp hồ sơ
            </h3>
            <div class="row">
                <div class="col-lg-6">
                    <div class="item">
                        @Html.LabelFor(model => model.JobPost.ExpirationDate)
                        <input type="text" name="JobPost.ExpirationDate" value="@Model.JobPost.ExpirationDate" class="form_control expiration-date datetimepicker" autocomplete="off" />
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="item">
                        @Html.LabelFor(model => model.JobPost.Address)
                        @Html.TextBoxFor(a => a.JobPost.Address, new { @class = "form_control" })
                    </div>
                </div>
            </div>
        </div>
        <div class="box">
            <div class="row">
                <div class="col-lg-6">
                    <h3 class="title">Kỹ năng yêu cầu</h3>
                    <div class="item">
                        <label>Kỹ năng yêu cầu</label>
                        <select  class="skill mutile" name="skill" placeholder="Chọn kỹ năng">
                            <option value="" selected disabled>Chọn kỹ năng</option>
                            @foreach (var item in Model.SkillSelectList)
                            {
                                <option name="skill" value="@item.Value" @if (Model.JobPost.Skills.Any(a => a.Id == Convert.ToInt32(item.Value))) { @Html.Raw("selected") }>@item.Text</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="col-lg-3">
                    <h3 class="title">Địa chỉ</h3>
                    <div class="item">
                        <label>Quốc gia </label>
                        <select  name="JobPost.CounId" required id="CounId">
                            <option value="" selected disabled>Chọn chọn thành phố</option>
                            @foreach (var item in Model.Countries)
                            {
                                <option value="@item.Id" @if (Model.JobPost.CounId == item.Id) { @Html.Raw("selected") }>@item.Name</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="col-lg-3">
                    <h3 class="title">Địa chỉ</h3>
                    <div class="item">
                        <label>Thành phố </label>
                        <select class="city mutile" name="city" placeholder="Chọn thành phố" multiple id="city">
                        </select>
                    </div>
                </div>
            </div>
        </div>
        <div class="box">
            <div class="col-lg-6">
                <h3 class="title">Số ngày hiển thị nổi bật</h3>
                Số tiền còn lại :
                <div class="item">
                    @Html.EditorFor(item => item.Date)
                    @Html.ValidationMessageFor(a => a.Date)
                </div>
                <div class="item">
                    Trừ tiền
                    @Html.CheckBoxFor(a => a.TruTien)
                </div>
            </div>
        </div>
        <div class="item">
            <div class="col-5">
                <div class="alert alert-info">
                    <p class="btn btn-success fileinput-button">
                        <i class="glyphicon glyphicon-plus"></i>
                        <span>Chọn ảnh...</span>
                        <input type="file" id="fileupload" name="files[]" accept="image/*" multiple="" />
                    </p><br />
                    - Chọn ảnh để upload: (gif, png, jpg, jpeg < 4MB)<br />
                    - Kích thước: 800x 800px<br />
                    - Ảnh đầu tiên sẽ là ảnh đại diện<br />
                </div>
                <div id="progress" class="progress">
                    <div class="progress-bar progress-bar-success"></div>
                </div>
            </div>
            <ul id="ListImages">
                @if (Model.JobPost.Image != null)
                {
                    var i = 1;
                    var arrPic = Model.JobPost.Image.Split(',');
                    foreach (var item in arrPic)
                    {
                        <li>
                            <input type="hidden" name="Pictures" value="@item" />
                            <img src="@Path.Combine("/images/job/",item)?w=80&h=80&mode=crop" alt="" />
                            <a href="javascript:;" id="@i" onclick="delfile( '@i')"><img src="/content/admin/icon-delete.png" alt="" /></a>
                        </li>
                        i = i + 1;
                    }
                }
            </ul>
            <br />
            <br />
            <br />
            <br />
            <br />
            <br />
            <br />
            <br />
            <br />
        </div>
        <div class="item">
            @Html.LabelFor(model => model.JobPost.Body)
            @Html.EditorFor(model => model.JobPost.Body)
            @Html.ValidationMessageFor(model => model.JobPost.Body)
        </div>
        <div class="item">
            @Html.LabelFor(model => model.JobPost.Requirement)
            @Html.EditorFor(model => model.JobPost.Requirement)
            @Html.ValidationMessageFor(model => model.JobPost.Requirement)
        </div>
        <div class="item">
            @Html.LabelFor(model => model.JobPost.Benefits)
            @Html.EditorFor(model => model.JobPost.Benefits)
            @Html.ValidationMessageFor(model => model.JobPost.Benefits)
        </div>
        <div class="item">
            @Html.LabelFor(model => model.JobPost.WorkLocation)
            @Html.EditorFor(model => model.JobPost.WorkLocation)
            @Html.ValidationMessageFor(model => model.JobPost.WorkLocation)
        </div>
        <div class="text-right mt-3">
            <button type="submit" class="btn quick-link">
                <i class="far fa-paper-plane mr-2"></i>
                Cập nhật
            </button>

        </div>
    </div>
}
@section scripts{
    <script>
        $(function () {
            $("#ListImages").sortable();
            $("#ListImages").disableSelection();
        });
        var i = 1;
        $("#fileupload").fileupload({
            add: function (e, data) {
                var uploadErrors = [];
                var acceptFileTypes = /^image\/(gif|jpe?g|png)$/i;
                if (data.originalFiles[0]["type"].length && !acceptFileTypes.test(data.originalFiles[0]["type"])) {
                    uploadErrors.push("Chỉ chấp nhận định dạng jpeg, jpg, png, gif");
                }
                if (data.originalFiles[0]["size"] > 4000000) {
                    uploadErrors.push("Dung lượng ảnh lớn hơn 4MB");
                }
                var totalImg = $("#ListImages .ui-sortable-handle").length;
                console.log(totalImg)
                if (totalImg >= 10) {
                    uploadErrors.push("Chỉ đăng tối đa 10 ảnh");
                }
                if (uploadErrors.length > 0) {
                    alert(uploadErrors.join("\n"));
                    return false;
                } else {
                    data.submit();
                }
                return true;
            },
            url: "/Uploader/Upload?folder=job&r=" + Math.random(),
            dataType: "json",
            done: function (e, data) {
                console.log(data)
                $.each(data.result.files, function (index, file) {
                    $('#ListImages').append('<li><input type="hidden" name="Pictures" value ="' + file.name + '" /><img src="/images/job/' + file.name + '?w=80&h=80"/><a href="javascript:;" id="' + i + '" onclick="delfile(' + i + ')"><img src="/content/admin/icon-delete.png" alt="" style="vertical-align:middle" /></a></li>');
                });
                i = i + 1;
                $("#progress").fadeOut(2000);
            },
            start: function () {
                $("#progress .progress-bar").css("width", "0");
                $("#progress").show();
            },
            progressall: function (e, data) {
                var progress = parseInt(data.loaded / data.total * 100, 10);
                $("#progress .progress-bar").css("width", progress + "%");
            }
        }).prop('disabled', !$.support.fileInput).parent().addClass($.support.fileInput ? undefined : 'disabled');

        function delfile(divid) {
            if (confirm('Bạn có chắc xóa ảnh này?')) {
                $('#' + divid).parent().fadeOut().remove();
            }
        }
        VirtualSelect.init({
            ele: '.mutile',
            required: true,
            multiple: true,
            search: true,
            maxValues: 4,
        });
        $('.datetimepicker').datetimepicker({
            format: 'd/m/Y H:i',
            vi: {
                months: [
                    "Tháng 1", "Tháng 2", "Tháng 3", "Tháng 4", "Tháng 5", "Tháng 6", "Tháng 7", "Tháng 8", "Tháng 9", "Tháng 10", "Tháng 11", "Tháng 12"
                ],
                dayOfWeekShort: [
                    "CN", "T2", "T3", "T4", "T5", "T6", "T7"
                ],
                dayOfWeek: ["Chủ nhật", "Thứ hai", "Thứ ba", "Thứ tư", "Thứ năm", "Thứ sáu", "Thứ bảy"]
            },
            minDate: new Date()
        });
        VirtualSelect.init({
            ele: '#CounId',
            search: true,
        });
        document.querySelector('#CounId').addEventListener('change', function () {
        const id = $(this).val();
        console.log(id);
            $.getJSON("/JobPostVcms/GetCitiesJob", { countruyId: id }, function (data) {
            var options = [];
            $.each(data, function (key, val) {
                options.push({ label: val.Name, value: val.Id });
            });
            var selectedCityIds = @Html.Raw(Json.Encode(Model.JobPost.Cities.Select(city => city.Id)));

            VirtualSelect.init({
                ele: '#city',
                options: options
            });
            document.querySelector('#city').setOptions(options);
            document.querySelector('#city').setValue(selectedCityIds);
         });
    });
    </script>
}


